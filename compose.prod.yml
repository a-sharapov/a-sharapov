name: a-sharapov

networks:
  a-sharapov:
    driver: bridge

services:
  certbot:
    image: certbot/certbot:latest
    container_name: $CERTBOT_SERVICE_NAME
    restart: unless-stopped
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    deploy:
      resources:
        limits:
          memory: 128M
    depends_on:
      - proxy
    networks:
      - a-sharapov

  proxy:
    container_name: $NGINX_SERVICE_NAME
    image: nginx:latest
    restart: unless-stopped
    volumes:
      - ./proxy/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./proxy/assets:/var/www/html/custom:rw
      - ./proxy/template-variables:/etc/nginx/templates/10-variables.conf.template:ro
      - ./certbot/www:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/nginx/ssl/:rw
    # Restart nginx every 6 hours to follow letsencrypt and replace certificate if needed automatically
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    environment:
      WEB_SERVICE_NAME: $WEB_SERVICE_NAME
      WEB_SERVICE_PORT: $WEB_PORT
      DOMAIN_NAME: $MAIN_DOMAIN_NAME
    deploy:
      resources:
        limits:
          memory: 128M
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    networks:
      - a-sharapov

  web:
    container_name: $WEB_SERVICE_NAME
    build:
      context: ./web
      dockerfile: ../Dockerfile.web.prod
      args:
        UID: 1000
        GID: 1000
    volumes:
      - ./.env:${WEB_ROOT}/.env:ro
    environment:
      DANGEROUSLY_DISABLE_HOST_CHECK: "true"
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    env_file:
      - ./.env
    restart: on-failure
    stdin_open: true
    networks:
      - a-sharapov

  bot:
    container_name: $TG_SERVICE_NAME
    image: bot
    build:
      context: ./bot
      dockerfile: ../Dockerfile.bot.prod
    env_file:
      - ./.env
    ports:
      - "${TG_PORT}:${TG_PORT}"
    volumes:
      - ./bot/main.ts:${TG_ROOT}/main.ts:rw
      - ./bot/assets:${TG_ROOT}/assets:rw
      - ./.env:/var/www/bot/.env:ro
    restart: on-failure
    stdin_open: true
    depends_on:
      - web
    networks:
      - a-sharapov

volumes:
  a-sharapov-persistent:
